name: Deploy Frontend Zero-Downtime
on:
  push:
    branches: [ prod ]
  pull_request:
    branches: [ prod ]
    types: [ closed ]

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    environment: CI/CD
    
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
    - name: Zero-Downtime Frontend Deployment
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USERNAME }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          set -e
          echo "üöÄ D√©ploiement Zero-Downtime d√©marr√©..."
          
          # Variables
          TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          CURRENT_SERVICE="frontend"
          NEW_SERVICE="frontend-new"
          
          cd /root/projects/Breezy
          
          # Backup et pull
          echo "üì¶ Mise √† jour du code..."
          git stash push -m "Pre-deploy backup $TIMESTAMP" || echo "No changes to stash"
          git fetch origin
          git checkout prod
          git pull origin prod
          
          cd ../breezy-backend
          
          # 1. Build la nouvelle image en arri√®re-plan (pendant que l'ancienne tourne)
          echo "üî® Construction de la nouvelle image..."
          docker compose -f docker-compose.prod-ssl.yml build --no-cache frontend
          
          # 2. D√©marrer le nouveau conteneur sur un port diff√©rent (ex: 3001)
          echo "üÜï D√©marrage du nouveau conteneur..."
          
          # Cr√©er un service temporaire pour le nouveau conteneur
          cat > docker-compose.temp.yml << EOF
          version: '3.8'
          services:
            frontend-new:
              build:
                context: ../Breezy
                dockerfile: Dockerfile
              container_name: breezy-frontend-new
              ports:
                - "3001:3000"  # Port temporaire
              environment:
                - NODE_ENV=production
              restart: unless-stopped
              networks:
                - breezy-network
          
          networks:
            breezy-network:
              external: true
          EOF
          
          # D√©marrer le nouveau conteneur
          docker compose -f docker-compose.temp.yml up -d frontend-new
          
          # 3. Attendre que le nouveau service soit pr√™t
          echo "‚è≥ V√©rification du nouveau service..."
          TIMEOUT=60
          COUNTER=0
          
          while [ $COUNTER -lt $TIMEOUT ]; do
            if curl -f -s http://localhost:3001 > /dev/null; then
              echo "‚úÖ Nouveau service pr√™t!"
              break
            fi
            
            if [ $COUNTER -eq $((TIMEOUT - 5)) ]; then
              echo "‚ùå Le nouveau service ne r√©pond pas, logs:"
              docker logs breezy-frontend-new --tail 20
              exit 1
            fi
            
            echo "Attente du nouveau service... ($COUNTER/$TIMEOUT)"
            sleep 2
            COUNTER=$((COUNTER + 2))
          done
          
          # 4. Mise √† jour de la configuration Traefik/Nginx pour pointer vers le nouveau service
          echo "üîÑ Basculement du trafic..."
          
          # Arr√™ter l'ancien conteneur
          docker compose -f docker-compose.prod-ssl.yml stop frontend
          
          # Reconfigurer le nouveau conteneur pour utiliser le bon port
          docker stop breezy-frontend-new
          docker rm breezy-frontend-new
          
          # D√©marrer le nouveau service avec la vraie config
          docker compose -f docker-compose.prod-ssl.yml up -d frontend
          
          # 5. V√©rification finale rapide
          echo "üè• V√©rification finale..."
          sleep 5
          
          if docker compose -f docker-compose.prod-ssl.yml ps frontend | grep -q "Up\|running"; then
            echo "‚úÖ Basculement r√©ussi!"
            
            # Nettoyage
            echo "üßπ Nettoyage..."
            docker compose -f docker-compose.temp.yml down || true
            rm -f docker-compose.temp.yml
            docker image prune -f
            
            echo "üéâ D√©ploiement termin√© en $(date)!"
            echo "‚è±Ô∏è  Temps d'interruption: ~2-3 secondes maximum"
          else
            echo "‚ùå Probl√®me avec le basculement"
            docker logs breezy-frontend-prod --tail 20
            exit 1
          fi
